//
//  CWBlockCipher.h
//
//  Copyright Â© 2016 A. Gordiyenko. All rights reserved.
//

/*
 The MIT License (MIT)
 
 Copyright (c) 2016 A. Gordiyenko
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

#import "CWCipherWattObject.h"

typedef NS_ENUM(NSUInteger, CWBlockAlgorithm) {
    CWBlockAlgorithmAES
};

typedef NS_ENUM(NSUInteger, CWBlockOperationMode) {
    CWBlockOperationModeCBC
};

@class CWKeyDerivation;

// TODO: Secure randomness is available only from  NS_AVAILABLE(10_10, 8_0). This means no salt/IV generation. Think what to do with it.

/**
 Class which describes a generic block cipher.
 @attention This is an "abstract" class. Use one of its subclasses to create an instance.
 */
@interface CWBlockCipher : CWCipherWattObject

#pragma mark - Read-only properties

/** Algorithm to be used for encryption / decryption. */
@property (readonly, nonatomic) CWBlockAlgorithm algorithm;

/** Block operation mode. Default value is `CWBlockOperationModeCBC`. */
@property (readonly, nonatomic) CWBlockOperationMode mode;

/** Size of one block in bytes for selected algorithm. Length of `IV` property value must be of this size if you set it explicitly. */
@property (readonly, nonatomic) size_t blockSizeInBytes;

/** Size of key in bytes for selected algorithm. It is highly recommended that length of `rawKeyData` property value is not less than this value. */
@property (readonly, nonatomic) size_t keySizeInBytes;

/** Boolean flag which indicates whether provided IV is valid. */
@property (readonly, nonatomic, getter=isValidIV) BOOL validIV;

/**
 This property is responsible for password-based key derivation. It uses PBKDF2 under the hood.
 
 @discussion
 
 If `password` is used for encryption and `useKeyDerivation` property is set then the key is derived from that password using PBKDF2 key derivation. PBKDF2 uses four parameters: password string (`password`), salt (`PBKDF2Salt`), number of rounds (`PBKDF2NumberOfRounds`) and pseudo-random algorithm (`PBKDF2PseudoRandomAlgorithm` property).
 
 The properties of this instance of `CWKeyDerivation` class are ignored if `rawKeyData` is used.
 
 @attention If `PBKDF2Salt` property of this property is empty:
 
 1) Upon encryption a random salt will be generated and stored into this property. You then save this value along with encrypted data and use it later for decryption.
 
 2) Upon decryption this value MUST be explicitly set (generally, you use salt value from previous encryption), otherwise an error will be generated.
 */
@property (readonly, strong, nonatomic) CWKeyDerivation *keyDerivation;

#pragma mark - Read-write properties

/**
 Raw key data. Its length should be exactly the same as `keySizeInBytes` property for selected algorithm. If this property is set `password` property is ignored.
 @attention You should provide a secure key, that is, either generated by cryptographically secure pseudorandom number generator or by processing a password string with password-based key derivation function.
 
 If you want to use a password please specify `password` property instead.
 */
@property (readwrite, strong, atomic) NSData *rawKeyData;

/**
 Initialization vector. Used for Cipher Block Chaining mode (`mode` property is equal to `CWBlockOperationModeCBC`. If present, must be the same length as `blockSizeInBytes` property value for selected algorithm. Don't provide non-random IV.
 
 @discussion
 If this property is empty and CBC mode is used:
 
 1) Upon encryption a random IV will be generated and stored into this property. You then save this value along with encrypted data and use it later for decryption.
 
 2) Upon decryption this value MUST be explicitly set (generally, you use IV from previous encryption), otherwise an error will be generated.
 */
@property (readwrite, strong, atomic) NSData *IV;

/** Boolean flag for toggling padding. If set PKCS7 Padding is used (recommended). Default is `YES`. */
@property (readwrite, assign, atomic) BOOL usePKCS7Padding;

/**
 Password string. This value is ignored if `rawKeyData` is used.
 
 @discussion
 Value of this property is used to derive raw key data from it. Encryption / decryption is then performed using the derived key.
 
 If `useKeyDerivation` flag is set (default and recommended behavior) the key is derived using password-based key derivation function (PBKDF2), otherwise key is derived exactly from password (highly unrecommended, basically ruins security). See `useKeyDerivation` for further details.
 */
@property (readwrite, strong, atomic) NSString *password;

/**
 Boolean flag for toggling the usage of password-based key derivation function (PBKDF). Default is `YES`. This value is ignored if `rawKeyData` is used.
 
 @discussion
 When deriving a key from a password it is highly recommended to use PBKDF. PBKDF2 is a part of PKCS5 v2.0 (RFC 2898) standard. See `keyDerivation` for more details.
 
 @see CWKeyDerivation
 
 @warning
 TL;DR Never set this property to `NO` if you don't know what you are doing.
 
 If you set it to `NO` and decide to use password for encryption / decryption the `password` data will be used as raw key data with the following conditions:
 
 1) If password length is less than `keySizeInBytes` value remaining bytes will be set to 0.
 
 2) If password length is more than `keySizeInBytes` value password will be truncated to key size.
 */
@property (readwrite, assign, atomic) BOOL useKeyDerivation;

#pragma mark - Initialization

- (instancetype)initWithMode:(CWBlockOperationMode)mode NS_DESIGNATED_INITIALIZER;

#pragma mark - Public Methods

// TODO: Add documentation
- (NSData *)encryptData:(NSData *)dataToEncrypt error:(NSError **)error;
- (NSData *)encryptData:(NSData *)dataToEncrypt withRawKeyData:(NSData *)key error:(NSError **)error;
- (NSData *)encryptData:(NSData *)dataToEncrypt withPassword:(NSString *)password error:(NSError **)error;

- (NSData *)decryptData:(NSData *)dataToDecrypt error:(NSError **)error;
- (NSData *)decryptData:(NSData *)dataToDecrypt withRawKeyData:(NSData *)key error:(NSError **)error;
- (NSData *)decryptData:(NSData *)dataToDecrypt withPassword:(NSString *)password error:(NSError **)error;

- (BOOL)encryptData:(NSData *)dataToEncrypt buffer:(void *)buffer bufferSize:(size_t)bufferSize bytesWritten:(size_t *)bytesWritten error:(NSError **)error;
- (BOOL)decryptData:(NSData *)dataToDecrypt buffer:(void *)buffer bufferSize:(size_t)bufferSize bytesWritten:(size_t *)bytesWritten error:(NSError **)error;

@end
